#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-04-20 Fil - Future code Yandex.Practicum
Final AI-bot: GPT, STT, TTS
README.md for more

Fil FC Personal assistant
@fil_fc_ai_pa
https://t.me/fil_fc_ai_pa_bot
"""
__version__ = '0.1'
__author__ = 'Firip Yamagusi'

# standard
from time import time_ns, strftime
from random import randint, choice
from asyncio import run
from math import ceil

# third-party
import logging
from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup, ReplyKeyboardRemove,
    Message, File)
import soundfile as sf

# custom
# –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
from config import (
    MAIN, TB, YANDEX, LIM,
    random_ideas
)
from final_db import (
    get_db_connection,
    create_db,
    is_limit,
    create_user,
    update_user,
    add_file2remove,
    insert_tts,
    insert_stt,
    insert_prompt,
    insert_idea,
    delete_idea,
    delete_all_ideas,
    get_ideas_list,
)
from final_stt import (
    ask_speech_recognition,
    ask_speech_kit_stt,
)
from final_tts import (
    ask_silero_v4_tts,
    ask_silero_tts,
    ask_speech_kit_tts,
)
from final_gpt import (
    count_tokens,
    count_tokens_dialog,
    ask_freegpt_async,
    ask_freegpt,
    ask_gpt,
)

if MAIN['test_mode']:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.INFO,
    )
else:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.WARNING,
        filename=MAIN['log_filename'],
        filemode="w",
        encoding='utf-8',
    )

# *******************************************************************
# –ü–û–ù–ï–°–õ–ê–°–¨! –í –ê–ö–ê–ö–£!
logging.warning(f"MAIN: start")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ). –ë–µ–∑ –ë–î –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
db_conn = get_db_connection(MAIN['db_filename'])
if db_conn == False:
    logging.error(f"MAIN: DB cannot open connection")
    exit(1)
logging.warning(f"MAIN: DB open connection")

if create_db(db_conn) == False:
    logging.error(f"MAIN DB: cannot create tables")
    db_conn.close()
    exit(2)

bot = TeleBot(TB['TOKEN'])
logging.warning(f"TB: start: {TB['BOT_NAME']} | {TB['TOKEN']}")

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã. –í —Å–ª–æ–≤–∞—Ä–µ, —á—Ç–æ–±—ã –ª–µ–≥—á–µ —É–ø—Ä–∞–≤–ª—è—Ç—å
T = {}
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS, STT (–≤–¥—Ä—É–≥ –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –ò–ò-—Ä–µ—Å—É—Ä—Å—ã)
T['t_stop_test'] = '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
# –ù–∞–≥–ª—è–¥–Ω—ã–π (–≥–æ—Ç–æ–≤—ã–π) –ø—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –æ–∑–≤—É—á–∫–∏. –°—Ä–∞–≤–Ω–∏—Ç—å –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é
T['t_compare_tts'] = '–°—Ä–∞–≤–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏'
# –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–¥–µ–π
T['t_random_idea'] = '–ü–æ–¥—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!'
T['t_back_to_plan'] = '–í—ã–π—Ç–∏ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'
T['t_idea_yes'] = '–î–∞, –æ–±—Å—É–¥–∏–º!'
T['t_idea_no'] = '–ù–µ—Ç, –¥—Ä—É–≥—É—é'
T['t_suggestion_add'] = 'üëçüèª –û–ö, –¥–æ–±–∞–≤—å –≤ –ø–ª–∞–Ω'
T['t_suggestion_decline'] = '–ù–µ –≥–æ–¥–∏—Ç—Å—è, –¥–∞–≤–∞–π –¥—Ä—É–≥—É—é'

mu_test_stt = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
mu_test_stt.add(*[T['t_stop_test']])

mu_test_tts = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
mu_test_tts.add(*[T['t_compare_tts'], T['t_stop_test']])

mu_random_idea = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
mu_random_idea.add(*[T['t_random_idea'], T['t_back_to_plan']])

mu_idea = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
mu_idea.add(*[T['t_idea_yes'], T['t_idea_no'], T['t_back_to_plan']])

mu_suggestion = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
mu_suggestion.add(*[T['t_suggestion_add'], T['t_suggestion_decline']])

# –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –º—É—á–∏—Ç—å –ë–î
user_data = {}

# –í–µ–¥—ë–º –∏–¥–µ—é –∫ –∑–∞–ø–∏—Å–∏, —Å—Ç–∞—Ç—É—Å –ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π, –∫—Ä–æ–º–µ 30/40
idea_statuses = {
    0: '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–¥–µ—è.',
    10: '–í—ã–±—Ä–∞–Ω–∞ –∏–¥–µ—è.',
    20: '–ò–¥—ë—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.',
    30: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –∑–∞–ø–∏—Å–∞—Ç—å.',
    40: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –ù–ï –∑–∞–ø–∏—Å–∞—Ç—å.',
}


def convert_ogg_to_wav(input_file: str, output_file: str) -> tuple:
    """
    –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ STT –Ω—É–∂–µ–Ω WAV
    https://pypi.org/project/soundfile/
    """
    try:
        data, samplerate = sf.read(input_file)
        sf.write(output_file, data, samplerate, format='WAV')
        return True, output_file
    except Exception as e:
        return False, e


def check_user(m):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (MAX_USERS)
    """
    user_id = m.from_user.id

    if user_id not in user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ user_data, —Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id
        # –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Ä—É–Ω–¥–∞ –≤ –∏–º–µ–Ω–∏.
        user_data[user_id]['user_name'] = m.from_user.first_name
        user_data[user_id]['user_age'] = 17

        # –î–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        user_data[user_id]['status'] = 0
        user_data[user_id]['idea'] = ''
        user_data[user_id]['dialog'] = []

        # –Ω–æ –≤ –ë–î –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if not create_user(db_conn, user_data[user_id]):
            bot.send_message(
                user_id,
                f"<b>–û–®–ò–ë–ö–ê!</b>\n"
                f"–ü–æ –¢–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
                f"–°–µ–π—á–∞—Å {LIM['P_USERS']['value']}/{LIM['P_USERS']['value']}. "
                f"–ù–µ –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å",
                parse_mode="HTML",
                reply_markup=hideKeyboard)
            logging.warning("MAIN: check_user Can't create user! {user_id}")
            return False


def voice_obj_to_text(m: Message, voice_obj: File, all_modules: int) -> tuple:
    """
    –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ –¥–ª—è /test_stt, /idea, /profile...
    –ù–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å voice –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤.
    –ù–∞—á–∏–Ω–∞–µ–º —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–∞, —Ç–æ –ø–ª–∞—Ç–Ω—ã–π.
    –ë–ª–æ–∫–∏ STT –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ.
    all_modules = 0 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–π—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
    """
    user_id = m.from_user.id

    # –¥–ª—è SpeechRecognition –Ω—É–∂–µ–Ω WAV
    ogg_file_path = voice_obj.file_path
    voice_file = bot.download_file(ogg_file_path)

    with open(ogg_file_path, 'wb') as ogg_file:
        ogg_file.write(voice_file)

    wav_file_path = f"{ogg_file_path[0:-3]}wav"
    wav_res = convert_ogg_to_wav(ogg_file_path, wav_file_path)[0]
    add_file2remove(db_conn, user_data[user_id], ogg_file_path)
    add_file2remove(db_conn, user_data[user_id], wav_file_path)

    stt_blocks = ceil(m.voice.duration / 15)
    logging.debug(f"MAIN: process_test_stt: {voice_obj.file_path} {stt_blocks}")

    result = {}

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechRecognition.Google
    asr_start = time_ns()
    success, res = ask_speech_recognition(wav_file_path)
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if success:
        result['SR.Google'] = {'content': res,
                               'asr_time_ms': asr_time_ms}
        insert_stt(db_conn, user_data[user_id],
                   wav_file_path, content=res,
                   blocks=stt_blocks, model='SR.Google',
                   asr_time_ms=asr_time_ms)
        if not all_modules:
            return True, result
    else:
        logging.info(f"–ú–æ–¥—É–ª—å SR.Google: –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")

    # –ü–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechKit. –ü–µ—Ä–µ–¥ –Ω–∏–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    r1, r2 = is_limit(db_conn,
                      param_name='P_STT_BLOCKS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + stt_blocks) > LIM['P_STT_BLOCKS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_STT_BLOCKS\n"
                     f"{LIM['P_STT_BLOCKS']['descr']}\n"
                     f"({r2} + {stt_blocks}) >= {LIM['P_STT_BLOCKS']['value']}")
        return False, {'error': error_msg}

    r1, r2 = is_limit(db_conn,
                      param_name='U_STT_BLOCKS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + stt_blocks) > LIM['U_STT_BLOCKS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_STT_BLOCKS\n"
                     f"{LIM['U_STT_BLOCKS']['descr']}\n"
                     f"({r2} + {stt_blocks}) >= {LIM['U_STT_BLOCKS']['value']}")
        return False, {'error': error_msg}

    asr_start = time_ns()
    success, res = ask_speech_kit_stt(voice_file)
    # success, res = True, "SpeechKit –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –∏–¥—ë—Ç —Ç–µ—Å—Ç –º–æ–¥—É–ª—è SR"
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if success:
        result['Yandex SpeechKit'] = {'content': res,
                                      'asr_time_ms': asr_time_ms}
        insert_stt(db_conn, user_data[user_id],
                   ogg_file_path, content=res,
                   blocks=stt_blocks, model='SpeechKit',
                   asr_time_ms=asr_time_ms)
        return True, result
    elif result.get('SpeechRecognition'):
        return True, result
    else:
        return False, {'error': res}

    return False, {'error': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}


def text_to_voice(m: Message, all_modules: int) -> tuple:
    """
    –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ –¥–ª—è /test_tts, /idea,...
    –ù–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å.
    –ù–∞—á–∏–Ω–∞–µ–º —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–∞, —Ç–æ –ø–ª–∞—Ç–Ω—ã–π.
    –ë–ª–æ–∫–∏ TTS –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ.
    all_modules = 0 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–π—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
    """
    user_id = m.from_user.id
    symbols = len(m.text)
    result = {}

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å Silero v4; –õ–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    tts_start = time_ns()
    # silero –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É wav-—Ñ–∞–π–ª—É
    wav_file_path = f"voice/ftts-{user_id}-{time_ns() // 1000000}.wav"
    bot.send_chat_action(user_id, 'record_audio')
    success, res = ask_silero_v4_tts(m.text, wav_file_path)
    tts_time_ms = (time_ns() - tts_start) // 1000000

    if success:
        add_file2remove(db_conn, user_data[user_id], wav_file_path)
        result['Silero v4'] = {'filename': wav_file_path,
                               'tts_time_ms': tts_time_ms}
        insert_tts(db_conn, user_data[user_id],
                   content=m.text, filename=wav_file_path,
                   symbols=symbols, model='Silero_v4',
                   tts_time_ms=tts_time_ms)
        if not all_modules:
            return True, result
    else:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.warning(f"MAIN: process_test_tts: Silero v4 fail: {res}")

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å Silero v3.1; –õ–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    tts_start = time_ns()
    # silero –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É wav-—Ñ–∞–π–ª—É
    wav_file_path = f"voice/ftts-{user_id}-{time_ns() // 1000000}.wav"
    bot.send_chat_action(user_id, 'record_audio')
    success, res = ask_silero_tts(m.text, wav_file_path)
    tts_time_ms = (time_ns() - tts_start) // 1000000

    if success:
        add_file2remove(db_conn, user_data[user_id], wav_file_path)
        result['Silero v3.1'] = {'filename': wav_file_path,
                                 'tts_time_ms': tts_time_ms}
        insert_tts(db_conn, user_data[user_id],
                   content=m.text, filename=wav_file_path,
                   symbols=symbols, model='Silero_v3.1',
                   tts_time_ms=tts_time_ms)
        if not all_modules:
            return True, result
    else:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.warning(f"MAIN: process_test_tts: Silero v3.1 fail: {res}")

    # –ü–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechKit. –ü–µ—Ä–µ–¥ –Ω–∏–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    r1, r2 = is_limit(db_conn,
                      param_name='P_TTS_SYMBOLS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + symbols) > LIM['P_TTS_SYMBOLS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_TTS_SYMBOLS\n"
                     f"{LIM['P_TTS_SYMBOLS']['descr']}\n"
                     f"({r2} + {symbols}) >= {LIM['P_TTS_SYMBOLS']['value']}")
        return False, {'error': error_msg}

    r1, r2 = is_limit(db_conn,
                      param_name='U_TTS_SYMBOLS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + symbols) > LIM['U_TTS_SYMBOLS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_TTS_SYMBOLS\n"
                     f"{LIM['U_TTS_SYMBOLS']['descr']}\n"
                     f"({r2} + {symbols}) >= {LIM['U_TTS_SYMBOLS']['value']}")
        return False, {'error': error_msg}

    tts_start = time_ns()
    bot.send_chat_action(user_id, 'record_audio')
    success, res = ask_speech_kit_tts(m.text)
    tts_time_ms = (time_ns() - tts_start) // 1000000

    if success:
        mp3_file_path = f"voice/tts-{user_id}-{time_ns() // 1000000}.mp3"
        with open(mp3_file_path, "wb") as f:
            f.write(res)
        add_file2remove(db_conn, user_data[user_id], mp3_file_path)
        result['Yandex SpeechKit'] = {'filename': mp3_file_path,
                                      'tts_time_ms': tts_time_ms}
        insert_tts(db_conn, user_data[user_id],
                   content=m.text, filename=mp3_file_path,
                   symbols=symbols, model='SpeechKit',
                   tts_time_ms=tts_time_ms)
        return True, result
    else:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.warning(f"MAIN: process_test_tts: SpeechKit fail: {res}")
        return False, {'error': f"Yandex SpeechKit error {res}"}


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '‚úåüèª <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.</b>\n\n'
        '–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–µ–ª –Ω–∞ –ª–µ—Ç–æ.\n'
        '–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /profile,\n'
        '–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –¥–µ–ª: /idea\n\n'
        '–ì–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª —Å–º–æ—Ç—Ä–∏ –≤ /show_plan\n\n'
        '–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['profile'])
def handle_profile(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∂–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ò–ò-—Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω–µ–µ
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '–°–æ–æ–±—â–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç. '
        '–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å/—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ: '
        '<i>—É—á—É—Å—å –≤ 10 –∫–ª–∞—Å—Å–µ</i> –∏–ª–∏ <i>–∑–∞–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É 10 –ª–µ—Ç –Ω–∞–∑–∞–¥</i> '
        '–∏–ª–∏ <i>—è –Ω–∞ 2 –∫—É—Ä—Å–µ</i> –Ω—É –∏ —Ç.–ø. .',
        parse_mode='HTML',
        reply_markup=hideKeyboard)
    bot.register_next_step_handler(m, process_profile)


def process_profile(m: Message):
    """
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º: —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç.
    –ì–æ–ª–æ—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ speech_recognition
    –î–∞–ª—å—à–µ —Ñ—Ä–∞–∑—É –¥–∞—ë–º GPT, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.voice:
        result = ""
        if m.voice.duration > 5:
            bot.send_message(
                user_id,
                "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—ë –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                "–ü–æ–ø—Ä–æ–±—É–π —á—ë—Ç—á–µ –∏ –∫–æ—Ä–æ—á–µ 5 —Å–µ–∫. –ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–º. /profile",
                reply_markup=hideKeyboard)

        voice_obj = bot.get_file(m.voice.file_id)
        success, res = voice_obj_to_text(m, voice_obj, all_modules=False)

        if success:
            for r in res.keys():
                result = res[r]['content']

    if m.text:
        result = m.text

    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å–ª–æ–º, —Ç–æ –ø—Ä–æ—Å—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    user_age = 17  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_data[user_id]['user_age'] = user_age
    gpt_msg = ''
    if result.isdigit() and (10 <= int(result) <= 75):
        user_age = int(result)
    # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ GPT
    else:
        gpt_model = "gpt3"
        gpt_prompt = (f"–ö—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {result}. "
                      f"–°–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–ª–æ–≤")
        # —Å–ª—É—á–∞–π–Ω–æ sync or async
        if randint(0, 2):
            success, res = run(ask_freegpt_async(
                model=gpt_model, prompt=gpt_prompt))
        else:
            success, res = ask_freegpt(
                model=gpt_model, prompt=gpt_prompt)

        logging.debug(f"MAIN: process_profile ask_freegpt: {res} / {result}")
        if success and res.isdigit():
            user_age = int(res)
            gpt_msg = ''
        else:
            gpt_msg = "‚òπÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT.\n"
        if not (10 <= user_age <= 75):
            user_age = 17

    user_data[user_id]['user_age'] = user_age
    update_user(db_conn, user_data[user_id])

    bot.send_message(
        user_id,
        f"{gpt_msg}–Ø –∑–∞–ø–∏—à—É, —á—Ç–æ —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: <b>{user_age}</b>. "
        f"–ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º: /profile",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(func=lambda m: m.text == T['t_back_to_plan'], content_types=["text"])
@bot.message_handler(commands=['show_plan'])
def handle_show_plan(m: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∏–¥–µ–π
    """
    user_id = m.from_user.id
    check_user(m)

    ideas = get_ideas_list(db_conn, user_data[user_id])
    if len(ideas) == 0:
        ideas_str = "–ü—É—Å—Ç–æ"
    else:
        ideas_str = "- " + "\n- ".join(ideas)

    bot.send_message(
        user_id,
        f"<b>–í–∞—à –ø–ª–∞–Ω –Ω–∞ –ª–µ—Ç–æ</b>\n\n"
        f"{ideas_str}\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω: /idea",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['idea'])
def handle_idea(m: Message):
    """
    –ó–¥–µ—Å—å –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Å—É–∂–¥–∞–µ–º —Å –ò–ò –Ω–æ–≤—É—é –∏–¥–µ—é.
    """
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>{user_data[user_id]['user_name']}, "
        "—Å–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ –ª–µ—Ç–æ!</b>\n\n"
        f"–í –ø—Ä–æ—Ñ–∏–ª–µ —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: <b>{user_data[user_id]['user_age']}</b>\n\n"
        "–°–æ–æ–±—â–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- <i>–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ</i>, –∏–ª–∏\n"
        "- <i>–∫–Ω–∏–≥–∏ –ø—Ä–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è</i> –∏–ª–∏\n"
        "- <i>–ø–µ–∫—É —Ç–æ—Ä—Ç–∏–∫–∏, –∫–∞–∫ —à–µ—Ñ!</i>\n\n"
        "–í –æ—Ç–≤–µ—Ç —è –ø—Ä–µ–¥–ª–æ–∂—É –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–µ–ª–æ. –í–º–µ—Å—Ç–µ –æ–±—Å—É–¥–∏–º –µ–≥–æ, —É—Ç–æ—á–Ω–∏–º, "
        "–∏ –µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –¥–æ–±–∞–≤–∏–º –≤ –ª–µ—Ç–Ω–∏–π –ø–ª–∞–Ω.",
        parse_mode='HTML',
        reply_markup=mu_random_idea)
    bot.register_next_step_handler(m, process_idea_1)


def process_idea_1(m: Message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º; –∏–ª–∏ —Å–≤–æ—é —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å GPT
    """
    user_id = m.from_user.id
    check_user(m)
    user_data[user_id]['method'] = ''
    error = False

    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–±–æ—Ä –∏–¥–µ–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    if m.text == T['t_back_to_plan']:
        handle_show_plan(m)
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏—Å–ª–∞–ª —Å–≤–æ—é –∏–¥–µ—é –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–∞—à—É —Ä–∞–Ω–¥–æ–º–Ω—É—é
    if m.text:
        user_data[user_id]['method'] = 'text'

        if m.text == T['t_random_idea']:
            result_msg = choice(random_ideas)
        else:
            result_msg = m.text

    if m.voice:
        user_data[user_id]['method'] = 'voice'

        bot.send_chat_action(user_id, 'typing')
        voice_obj = bot.get_file(m.voice.file_id)
        success, res = voice_obj_to_text(m, voice_obj, all_modules=False)

        if success:
            result_msg = res[next(iter(res))]['content']
        else:
            result_msg = res['error']
            error = True

    if not error and len(result_msg) > YANDEX['MAX_ASK_LENGTH']:
        result_msg = f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT, —É–º–µ–Ω—å—à–∏ –¥–æ {YANDEX['MAX_ASK_LENGTH']} —Å–∏–º–≤.\n(<i>{result_msg}</i>)"
        error = True

    if error:
        bot.send_message(
            user_id,
            f"<b>–û—à–∏–±–∫–∞:</b>\n"
            f"{result_msg}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /idea",
            parse_mode='HTML',
            reply_markup=hideKeyboard)
    else:
        user_data[user_id]['idea'] = result_msg
        bot.send_message(
            user_id,
            f"<b>–ù–æ–≤–∞—è –∏–¥–µ—è:</b>\n\n"
            f"{user_data[user_id]['idea']}\n\n"
            f"–û–±—Å—É–¥–∏–º –∏–¥–µ—é —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º?\n",
            parse_mode='HTML',
            reply_markup=mu_idea)
        bot.register_next_step_handler(m, process_idea_2)


def process_idea_2(m: Message):
    """
    –í—Ç–æ—Ä–æ–π —à–∞–≥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–±–µ–∏: –ø–µ—Ä–µ–¥–∞—ë–º –µ—ë –≤ GPT
    """
    user_id = m.from_user.id
    check_user(m)
    error = False

    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–±–æ—Ä –∏–¥–µ–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    if m.text == T['t_idea_no']:
        handle_idea(m)
        return

    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–±–æ—Ä –∏–¥–µ–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    if m.text == T['t_back_to_plan']:
        handle_show_plan(m)
        return

    # –ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –∏–∑–±—ã—Ç–æ—á–Ω—ã–º. –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–º GPT
    # if m.text == T['t_idea_yes']:
    #     bot.send_message(
    #         user_id,
    #         f"<b>–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n"
    #         f"–∏–¥–µ—è: {user_data[user_id]['idea']}\n"
    #         f"—Å–ø–æ—Å–æ–±: {user_data[user_id]['method']}",
    #         parse_mode='HTML',
    #         reply_markup=hideKeyboard)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    user_data[user_id]['dialog'] = []
    user_data[user_id]['dialog'].append({'role': 'system', 'text': YANDEX['SYSTEM_PROMPT']})
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    user_prompt = f"–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['user_age']}. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {user_data[user_id]['idea']}."
    user_data[user_id]['dialog'].append({'role': 'user', 'text': user_prompt})
    # print(user_data[user_id]['dialog'])
    logging.warning(f"MAIN: GPT suggestion: {YANDEX['SYSTEM_PROMPT']}")
    logging.warning(f"MAIN: GPT suggestion: {user_prompt}")

    # –°–æ—Ö—Ä–∞–Ω—è—é —á–µ—Ä–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    # –û—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    # insert_idea(db_conn, user_data[user_id], user_data[user_id]['idea'])

    system_prompt_tokens = count_tokens(YANDEX['SYSTEM_PROMPT'])
    user_prompt_tokens = count_tokens(user_prompt)

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–∑–±–∏–ª—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω—ã, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT!
    if system_prompt_tokens and user_prompt_tokens:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤? –ª–∏—á–Ω—ã–π –ª–∏–º–∏—Ç
        is_lim, cur_val = is_limit(db_conn, param_name='U_GPT_TOKENS', user=user_data[user_id])
        # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
        total_tokens = cur_val + system_prompt_tokens + user_prompt_tokens
        if is_lim or total_tokens > LIM['U_GPT_TOKENS']['value']:
            bot.send_message(
                user_id,
                f"<b>–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_GPT_TOKENS</b>\n"
                f"{LIM['U_GPT_TOKENS']['descr']}\n"
                f"({cur_val} + {system_prompt_tokens + user_prompt_tokens}) >= {LIM['U_GPT_TOKENS']['value']}\n"
                f"–°–ª–µ–¥–∏ –∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–º –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤: /stat",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤? –æ–±—â–∏–π –ª–∏–º–∏—Ç
        is_lim, cur_val = is_limit(db_conn, param_name='P_GPT_TOKENS', user=user_data[user_id])
        # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
        total_tokens = cur_val + system_prompt_tokens + user_prompt_tokens
        if is_lim or total_tokens > LIM['P_GPT_TOKENS']['value']:
            bot.send_message(
                user_id,
                f"<b>–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_GPT_TOKENS</b>\n"
                f"{LIM['P_GPT_TOKENS']['descr']}\n"
                f"({cur_val} + {system_prompt_tokens + user_prompt_tokens}) >= {LIM['P_GPT_TOKENS']['value']}\n"
                f"–°–ª–µ–¥–∏ –∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–º –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤: /stat",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
            return False

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç, —Ç–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∏ –∏–¥—ë–º –≤ GPT
        insert_prompt(db_conn, user_data[user_id], 'system', YANDEX['SYSTEM_PROMPT'], system_prompt_tokens)
        insert_prompt(db_conn, user_data[user_id], 'user', user_prompt, user_prompt_tokens)
        user_data[user_id]['suggestion'] = ask_gpt(user_data[user_id])
        mu = mu_suggestion
        logging.warning(f"MAIN: GPT suggestion: {user_data[user_id]['suggestion']}")
    else:
        gpt_suggestion = "–ó–∞–ø—Ä–æ—Å –≤ GPT –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª, —Ç.–∫. –Ω–µ —Å–º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤."
        logging.warning(f"MAIN: GPT suggestion ERROR: tokens counting")
        error = True
        mu = hideKeyboard

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ –≤–µ—Ä–Ω—É—Ç—å –≤ —Ç–∞–∫–æ–º –∂–µ
    if user_data[user_id]['method'] == 'text':
        bot.send_message(
            user_id,
            f"<b>–ò–¥–µ—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞:</b>\n\n"
            f"–ò–¥–µ—è: {user_data[user_id]['idea']}\n"
            f"–°–ø–æ—Å–æ–±: {user_data[user_id]['method']}\n"
            f"–¢–æ–∫–µ–Ω–æ–≤: {system_prompt_tokens + user_prompt_tokens}\n\n"
            f"–ó–∞–ø—Ä–æ—Å:\n<i>{user_prompt}</i>\n\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n<i>{user_data[user_id]['suggestion']}</i>",
            parse_mode='HTML',
            reply_markup=mu)

    if user_data[user_id]['method'] == 'voice':

        symbols = len(user_data[user_id]['suggestion'])

        # TTS —Å –ø–æ–º–æ—â—å—é Silero_v4
        # wav_file_path = f"voice/ftts-{user_id}-{time_ns() // 1000000}.wav"
        # tts_start = time_ns()
        # bot.send_chat_action(user_id, 'record_audio')
        # success, res = ask_silero_v4_tts(user_data[user_id]['suggestion'], wav_file_path)
        # tts_time_ms = (time_ns() - tts_start) // 1000000
        # insert_tts(db_conn, user_data[user_id],
        #            content=user_data[user_id]['suggestion'], filename=wav_file_path,
        #            symbols=symbols, model='Silero_v4',
        #            tts_time_ms=tts_time_ms)
        #
        # if success:
        #     add_file2remove(db_conn, user_data[user_id], wav_file_path)
        #     bot.send_chat_action(user_id, 'upload_audio')
        #     with open(wav_file_path, "rb") as f:
        #         bot.send_audio(
        #             user_id, audio=f,
        #             title=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        #             performer='–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫',
        #             caption={user_data[user_id]['suggestion']},
        #             reply_markup=mu)
        # else:
        #     # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        #     bot.send_message(
        #         user_id,
        #         f"<b>–û—à–∏–±–∫–∞!</b>\n\n"
        #         f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Silero v4",
        #         parse_mode='HTML',
        #         reply_markup=hideKeyboard)
        #     logging.warning(f"MAIN: process_idea_2: Silero v4 fail")

        # TTS –° –ø–æ–º–æ—â—å—é Yandex SpeechKit

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤? –ª–∏—á–Ω—ã–π –ª–∏–º–∏—Ç
        is_lim, cur_val = is_limit(db_conn, param_name='U_TTS_SYMBOLS', user=user_data[user_id])
        # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
        total_symbols = cur_val + symbols
        if is_lim or total_symbols > LIM['U_TTS_SYMBOLS']['value']:
            bot.send_message(
                user_id,
                f"<b>–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_TTS_SYMBOLS</b>\n"
                f"{LIM['U_TTS_SYMBOLS']['descr']}\n"
                f"({cur_val} + {symbols}) >= {LIM['U_TTS_SYMBOLS']['value']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ–±—â–∞–π—Å—è —Å –ò–ò —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
                f"–°–ª–µ–¥–∏ –∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–º –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤: /stat",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤? –æ–±—â–∏–π –ª–∏–º–∏—Ç
        is_lim, cur_val = is_limit(db_conn, param_name='P_TTS_SYMBOLS', user=user_data[user_id])
        # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
        total_symbols = cur_val + symbols
        if is_lim or total_symbols > LIM['P_TTS_SYMBOLS']['value']:
            bot.send_message(
                user_id,
                f"<b>–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_TTS_SYMBOLS</b>\n"
                f"{LIM['P_TTS_SYMBOLS']['descr']}\n"
                f"({cur_val} + {symbols}) >= {LIM['P_TTS_SYMBOLS']['value']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ–±—â–∞–π—Å—è —Å –ò–ò —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
                f"–°–ª–µ–¥–∏ –∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–º –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤: /stat",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
            return False

        mp3_file_path = f"voice/tts-{user_id}-{time_ns() // 1000000}.mp3"
        tts_start = time_ns()
        bot.send_chat_action(user_id, 'record_audio')
        success, res = ask_speech_kit_tts(user_data[user_id]['suggestion'])
        tts_time_ms = (time_ns() - tts_start) // 1000000
        insert_tts(db_conn, user_data[user_id],
                   content=user_data[user_id]['suggestion'], filename=mp3_file_path,
                   symbols=symbols, model='SpeechKit',
                   tts_time_ms=tts_time_ms)

        if success:
            with open(mp3_file_path, "wb") as f:
                f.write(res)
            add_file2remove(db_conn, user_data[user_id], mp3_file_path)
            bot.send_chat_action(user_id, 'upload_audio')
            with open(mp3_file_path, "rb") as f:
                bot.send_audio(
                    user_id, audio=f,
                    title=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                    performer='–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫',
                    caption={user_data[user_id]['suggestion']},
                    reply_markup=mu)

        else:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                user_id,
                f"<b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Yandex SpeechKit",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
            logging.warning(f"MAIN: process_idea_2: Yandex SpeechKit fail")

    bot.register_next_step_handler(m, process_idea_3)


def process_idea_3(m: Message):
    """
    –¢—Ä–µ—Ç–∏–π —à–∞–≥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–±–µ–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–ª–∞–Ω –∏–ª–∏ –∏–¥—ë–º –¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é
    """
    user_id = m.from_user.id
    check_user(m)
    error = False

    if m.text == T['t_suggestion_add']:
        insert_idea(db_conn, user_data[user_id], user_data[user_id]['suggestion'])
        suggestion_result = "–ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω!"
    else:
        suggestion_result = "–≠—Ç—É –∏–¥–µ—é –æ—Ç–∫–ª–æ–Ω–∏–ª–∏!"

    bot.send_message(
        user_id,
        f"<b>{suggestion_result}</b>\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é: /idea\n"
        f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω: /show_plan",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_tts'])
def handle_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ Text-to-speech</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ 50-150 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–∏ –≤ –æ—Ç–≤–µ—Ç –æ–∑–≤—É—á–∫—É.\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏ <i>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>)\n\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª—ã: /stat ",
        parse_mode='HTML',
        reply_markup=mu_test_tts)
    bot.register_next_step_handler(m, process_test_tts)


def process_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.text == T['t_compare_tts']:
        bot.send_message(
            user_id,
            f"<b>–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä—ë—Ö –º–æ–¥–µ–ª–µ–π Text-to-speech</b>\n\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ <b>Silero v4</b> –∏ <b>v3.1</b> "
            f"(–Ω–∞ —Å–ª–∞–±–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ) "
            f"–∏ –ø–ª–∞—Ç–Ω–∞—è <b>Yandex SpeechKit</b> (–Ω–∞ –±—ã—Å—Ç—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ).\n\n"
            f"–£ <b>Silero v4</b> –∞–≤—Ç–æ-—É–¥–∞—Ä–µ–Ω–∏—è –∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ–π —Ç–µ–∫—Å—Ç: /test_tts",
            parse_mode='HTML',
            reply_markup=hideKeyboard)

        example = choice(['gvozdik', 'sokol'])
        bot.send_chat_action(user_id, 'upload_audio')
        with open(f'voice/{example}-silero-v4.wav', "rb") as f:
            bot.send_audio(
                user_id, audio=f, title='Free TTS', performer='Silero v4')
        bot.send_chat_action(user_id, 'upload_audio')
        with open(f'voice/{example}-silero-v3.wav', "rb") as f:
            bot.send_audio(
                user_id, audio=f, title='Free TTS', performer='Silero v3.1')
        bot.send_chat_action(user_id, 'upload_audio')
        with open(f'voice/{example}-speechkit.mp3', "rb") as f:
            bot.send_audio(
                user_id, audio=f, title='Yandex TTS', performer='SpeechKit')
        return

    if m.text == T['t_stop_test']:
        bot.send_message(
            user_id,
            f"–û–∫, –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Text-to-speech.\n"
            f"–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ: /start",
            reply_markup=hideKeyboard)
        return

    if not m.text:
        bot.send_message(
            user_id,
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_tts",
            reply_markup=hideKeyboard)
        return

    symbols = len(m.text)

    bot.send_message(
        user_id,
        f"–ü–µ—Ä–µ–¥–∞—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"—Å–∏–º–≤–æ–ª–æ–≤: <b>{symbols}</b>\n"
        f"—Ç–µ–∫—Å—Ç: <i>{m.text}</i>\n",
        parse_mode='HTML',
        reply_markup=hideKeyboard)

    success, res = text_to_voice(m, all_modules=True)

    if success:
        for r in res.keys():
            with open(res[r]['filename'], "rb") as f:
                bot.send_chat_action(user_id, 'upload_audio')
                bot.send_audio(
                    user_id, audio=f,
                    title=f"TTS –∑–∞ {res[r]['tts_time_ms']} –º—Å",
                    performer={r},
                    caption="–ó–∞–ø—É—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å –∑–≤—É–∫, –µ—Å–ª–∏ –Ω–µ —Å–ª—ã—à–Ω–æ. "
                            "–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat")
    else:
        bot.send_message(
            user_id,
            f"<b>–û—à–∏–±–∫–∞!</b>\n\n{res['error']}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat",
            parse_mode='HTML',
            reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_stt'])
def handle_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Speech-to-text</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 5-15 —Å–µ–∫, –ø–æ–ª—É—á–∏ –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç.\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏ <i>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>)\n\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –±–ª–æ–∫–∏ (1 –±–ª–æ–∫ = 15 —Å–µ–∫): /stat ",
        parse_mode='HTML',
        reply_markup=mu_test_stt)
    bot.register_next_step_handler(m, process_test_stt)


def process_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.text == T['t_stop_test']:
        bot.send_message(
            user_id,
            f"–û–∫, –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Speech-to-text.\n"
            f"–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ: /start",
            reply_markup=hideKeyboard)
        return

    if not m.voice:
        bot.send_message(
            user_id,
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_stt",
            reply_markup=hideKeyboard)
        return

    if m.voice.duration > 30:
        bot.send_message(
            user_id,
            f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_stt",
            reply_markup=hideKeyboard)
        return

    bot.send_message(
        user_id,
        f"–ü–µ—Ä–µ–¥–∞—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"–±–ª–æ–∫–æ–≤: <b>{ceil(m.voice.duration / 15)}</b>\n"
        f"–¥–ª–∏–Ω–∞: <b>{m.voice.duration} —Å–µ–∫</b>\n",
        parse_mode='HTML',
        reply_markup=hideKeyboard)

    # –î–ª—è SpeechKit –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.send_chat_action(user_id, 'typing')
    voice_obj = bot.get_file(m.voice.file_id)
    success, res = voice_obj_to_text(m, voice_obj, all_modules=False)

    if success:
        result_msg = ""
        for r in res.keys():
            result_msg += (
                f"–ú–æ–¥—É–ª—å <b>{r}</b> –∑–∞ {res[r]['asr_time_ms']} –º—Å:\n"
                f"<i>{res[r]['content']}</i>\n\n")
    else:
        result_msg = f"<b>–û—à–∏–±–∫–∞!</b>\n\n{res['error']}\n\n"
    bot.send_message(
        user_id,
        f"{result_msg}–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


def append_stat(stat: list, param_name: str, user: dict) -> list:
    """
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ /stat
    """
    r1, r2 = is_limit(db_conn, param_name=param_name, user=user)

    stat.append(f"{LIM[param_name]['descr']}:")
    stat.append(f"<b>{int(100 * r2 / LIM[param_name]['value'])}</b>% "
                f"({r2} / {LIM[param_name]['value']})")

    return stat


@bot.message_handler(commands=['stat'])
def handle_stat(m: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    p_stat = []
    p_stat = append_stat(p_stat, 'P_USERS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_GPT_TOKENS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_TTS_SYMBOLS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_STT_BLOCKS', user_data[user_id])

    u_stat = []
    u_stat = append_stat(u_stat, 'U_GPT_TOKENS', user_data[user_id])
    u_stat = append_stat(u_stat, 'U_TTS_SYMBOLS', user_data[user_id])
    u_stat = append_stat(u_stat, 'U_STT_BLOCKS', user_data[user_id])

    bot.send_message(
        user_id,
        f"<b>–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –†–ê–°–•–û–î –ò–ò-–†–ï–°–£–†–°–û–í</b>\n\n"
        f"<b>–í–µ—Å—å –ø—Ä–æ–µ–∫—Ç:</b>\n\n"
        f"{'\n'.join(p_stat)}\n\n"
        f"<b>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥:</b>\n\n"
        f"{'\n'.join(u_stat)}",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['help'])
def handle_help(m: Message):
    """
    –ß—É—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ì–∏—Ç—Ö–∞–±
    """
    # global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>–°–ø—Ä–∞–≤–∫–∞ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>\n\n"
        f"–≠—Ç–æ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ü—Ä–∞–∫—Ç–∏–∫—É–º–µ. –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, "
        f"–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å <b>–ø–ª–∞–Ω –¥–µ–ª</b> –Ω–∞ –ª–µ—Ç–æ:\n"
        f"- —É–∫–∞–∂–∏ –≤ –ü—Ä–æ—Ñ–∏–ª–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç;\n"
        f"- –ø–æ—Ç–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–¥–µ—è —Å–æ–æ–±—â–∏ –∫–∞–∫–æ–µ-—Ç–æ —Å–≤–æ—ë —É–≤–ª–µ—á–µ–Ω–∏–µ;\n"
        f"- –æ–±—Å—É–¥–∏ —Å GPT –≤–∞—Ä–∏–∞–Ω—Ç—ã <b>–¥–µ–ª–∞</b> (—Ü–µ–ª—å, –∑–∞–¥–∞–Ω–∏–µ) –ø–æ —É–≤–ª–µ—á–µ–Ω–∏—é;\n"
        f"- –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–ª–æ –¥–æ–±–∞–≤—å –≤ <b>–ø–ª–∞–Ω</b>, –ø–æ–≤—Ç–æ—Ä–∏ —Å –¥—Ä—É–≥–∏–º —É–≤–ª–µ—á–µ–Ω–∏–µ–º;\n"
        f"- –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏—à—å –æ—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –∏ –ø—Ä–æ–≤–µ–¥—ë—à—å –ª–µ—Ç–æ —Å –ø–æ–ª—å–∑–æ–π!\n\n"
        f""
        f"<b>/profile</b> - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Ç–µ–±–µ 17 –ª–µ—Ç. "
        f"–ó–∞–ø—É—Å—Ç–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç. "
        f"–£–∫–∞–∑–∞—Ç—å –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>19</i>, "
        f"–∏–ª–∏ —ç–º–æ–¥–∑–∏ 1Ô∏è‚É£8Ô∏è‚É£, "
        f"–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–∏–ø–∞ <i>—á–µ—Ä–µ–∑ 5 –ª–µ—Ç –º–Ω–µ —Å—Ç—É–∫–Ω–µ—Ç 20!</i>, "
        f"–∏–ª–∏ –ª—é–±—ã–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, "
        f"–Ω–∞–ø—Ä–∏–º–µ—Ä <i>—É –º–µ–Ω—è –≤–æ–∑—Ä–∞—Å—Ç –•—Ä–∏—Å—Ç–∞</i>.\n\n"
        f""
        f"<b>/idea</b> - –≤—Ö–æ–¥ –≤ –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å GPT. "
        f"–ú–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–º, –∞ –º–æ–∂–Ω–æ –∏ —Ç–µ–∫—Å—Ç–æ–º. –í –∏—Ç–æ–≥–µ –æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ "
        f"–ø–æ–ª—É—á–∏—Ç—å—Å—è –æ—á–µ—Ä–µ–¥–Ω–æ–µ <b>–¥–µ–ª–æ</b> –Ω–∞ –ª–µ—Ç–æ. –≠—Ç–æ –¥–µ–ª–æ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å "
        f"–≤ <b>–ø–ª–∞–Ω</b> –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.\n\n"
        f""
        f"<b>/show_plan</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã—Ö –¥–µ–ª (–ø–ª–∞–Ω). "
        f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –∞ –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–∞—á–∞—Ç—å "
        f"–Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫!\n\n"
        f""
        f"<b>/stat</b> - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π —Ä–∞—Å—Ö–æ–¥ "
        f"–ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ (—Ç–æ–∫–µ–Ω—ã –¥–ª—è GPT, —Å–∏–º–≤–æ–ª—ã –¥–ª—è TTS, –±–ª–æ–∫–∏ –¥–ª—è STT). "
        f"–ö–æ–≥–¥–∞ —Ç—ã –∏—Å—á–µ—Ä–ø–∞–µ—à—å —Å–≤–æ–π –ª–∏–º–∏—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–µ—Ç "
        f"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.\n\n"
        f""
        f"<b>/test_tts</b> - –ø–æ –¢–ó –Ω—É–∂–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç "
        f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–Ω—ã—Ö –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –°–ò–ù–¢–ï–ó–ê —Ä–µ—á–∏. "
        f"–ü–æ–º–Ω–∏, —á—Ç–æ –ò–ò-—Ä–µ—Å—É—Ä—Å—ã —Ç—Ä–∞—Ç—è—Ç—Å—è –∏–∑ —Ç–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞.\n\n"
        f""
        f"<b>/test_stt</b> - –ø–æ –¢–ó –Ω—É–∂–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è STT. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç "
        f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–Ω—ã—Ö –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø —Ä–µ—á–∏. "
        f"–ü–æ–º–Ω–∏, —á—Ç–æ –ò–ò-—Ä–µ—Å—É—Ä—Å—ã —Ç—Ä–∞—Ç—è—Ç—Å—è –∏–∑ —Ç–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞.\n\n"
        f""
        f"–ï—â—ë –ø–æ–¥—Ä–æ–±–Ω–µ–µ - <a href='https://github.com/Fil-Yamagusi/ai-final'>"
        f"README –Ω–∞ Github</a>",
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=hideKeyboard)


# *********************************************************************
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.infinity_polling()
except urllib3.exceptions.ReadTimeoutError as e:
    logging.info(f"TB: Read timed out. (read timeout=25)")

logging.warning(f"TB: finish")

db_conn.close()
logging.warning(f"MAIN: DB close connection")

logging.warning(f"MAIN: finish")
