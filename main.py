#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-04-20 Fil - Future code Yandex.Practicum
Final AI-bot: GPT, STT, TTS
README.md for more

Fil FC Personal assistant
@fil_fc_ai_pa
https://t.me/fil_fc_ai_pa_bot
"""
__version__ = '0.1'
__author__ = 'Firip Yamagusi'


# standard
from time import time_ns, strftime
from random import randint

# third-party
import logging
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, Message

# custom
# –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
from config import MAIN, TB, YANDEX, LIM
from final_db import (
    get_db_connection,
    create_db,
    is_limit,
    create_user,
    update_user,
)

if MAIN['test_mode']:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.INFO,
    )
else:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.WARNING,
        filename=MAIN['log_filename'],
        filemode="w",
    )

# *******************************************************************
# –ü–û–ù–ï–°–õ–ê–°–¨! –í –ê–ö–ê–ö–£!
logging.warning(f"MAIN: start")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ). –ë–µ–∑ –ë–î –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
db_conn = get_db_connection(MAIN['db_filename'])
if db_conn == False:
    exit(1)

logging.warning(f"MAIN: DB open connection")

r = create_db(db_conn)
if r == False:
    exit(2)

bot = TeleBot(TB['TOKEN'])
logging.warning(f"TB: start: {TB['BOT_NAME']} | {TB['TOKEN']}")

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –º—É—á–∏—Ç—å –ë–î
user_data = {}


def check_user(m):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (MAX_USERS)
    """
    global user_data, db_conn

    user_id = m.from_user.id

    if user_id not in user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ user_data, —Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id
        # –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Ä—É–Ω–¥–∞ –≤ –∏–º–µ–Ω–∏.
        user_data[user_id]['user_name'] = m.from_user.first_name
        user_data[user_id]['age'] = 20

        # –Ω–æ –≤ –ë–î –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if not create_user(db_conn, user_data[user_id]):
            bot.send_message(
                user_id,
                f"<b>–û–®–ò–ë–ö–ê!</b>\n"
                f"–ü–æ –¢–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
                f"–°–µ–π—á–∞—Å {LIM['P_USERS']['value']}/{LIM['P_USERS']['value']}. "
                f"–ù–µ –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å",
                parse_mode="HTML",
                reply_markup=hideKeyboard)
            logging.warning("MAIN: check_user Can't create user! {user_id}")
            return False


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '‚úåüèª <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.</b>\n\n'
        '–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–µ–ª –Ω–∞ –ª–µ—Ç–æ. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /profile,'
        '–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –¥–µ–ª: /idea\n\n'
        '–ì–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª —Å–º–æ—Ç—Ä–∏ –≤ /show_plan\n\n'
        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['profile'])
def handle_profile(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∂–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ò–ò-—Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω–µ–µ
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '–°–æ–æ–±—â–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç. '
        '–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ '
        '<i>—É—á—É—Å—å –≤ 10 –∫–ª–∞—Å—Å–µ</i> –∏–ª–∏ <i>—è –Ω–∞ 2 –∫—É—Ä—Å–µ</i>.',
        parse_mode='HTML',
        reply_markup=hideKeyboard)
    bot.register_next_step_handler(m, process_profile)

def process_profile(m: Message):
    """
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.voice:
        bot.send_message(
            user_id,
            f"process_profile –ì–û–õ–û–°–û–ú {user_id}",
            reply_markup=hideKeyboard)
        file_id = m.voice.file_id
        print(f"{file_id}")
        file_info = bot.get_file(file_id)
        print(f"{file_info}")
        downloaded_file = bot.download_file(file_info.file_path)
        print(f"{downloaded_file}")

    if m.text:
        bot.send_message(
            user_id,
            f"process_profile –¢–ï–ö–°–¢–û–ú {user_id}",
            reply_markup=hideKeyboard)

    user_data[user_id]['user_age'] = randint(12, 42)
    print(user_data[user_id])
    update_user(db_conn, user_data[user_id])


@bot.message_handler(commands=['idea'])
def handle_idea(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /idea
    –ó–¥–µ—Å—å –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Å—É–∂–¥–∞–µ–º —Å –ò–ò –Ω–æ–≤—É—é –∏–¥–µ—é.
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '–°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ª–µ—Ç–æ!\n\n'
        '–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–Ø –ª—é–±–ª—é –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ!</i>, '
        '–∞ —è –ø—Ä–µ–¥–ª–æ–∂—É –∑–∞–¥–∞–Ω–∏–µ. '
        '–ï—Å–ª–∏ –æ–Ω–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –ø—Ä–∏—à–ª–∏ '
        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_tts'])
def handle_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"test_tts",
        parse_mode='HTML',
        reply_markup=hideKeyboard)
    bot.register_next_step_handler(m, process_test_tts)


def process_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"process_test_tts",
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_stt'])
def handle_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"test_stt",
        parse_mode='HTML',
        reply_markup=hideKeyboard)
    bot.register_next_step_handler(m, process_test_stt)


def process_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"process_test_stt",
        reply_markup=hideKeyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.infinity_polling()
except urllib3.exceptions.ReadTimeoutError as e:
    logging.info(f"TB: Read timed out. (read timeout=25)")

logging.warning(f"TB: finish")

db_conn.close()
logging.warning(f"MAIN: DB close connection")

logging.warning(f"MAIN: finish")

#
#
# for limit in LIM.keys():
#     is_limit(db_conn,
#              param_name=limit,
#              user=user_data[666],
#              session_id=1)

# [print("MAIN", val) for val in MAIN]
# [print("TB", val) for val in TB]
# [print("YANDEX", val) for val in YANDEX]
# [print(val['descr'], val['value']) for val in LIM.values()]
