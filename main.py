#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-04-20 Fil - Future code Yandex.Practicum
Final AI-bot: GPT, STT, TTS
README.md for more

Fil FC Personal assistant
@fil_fc_ai_pa
https://t.me/fil_fc_ai_pa_bot
"""
__version__ = '0.1'
__author__ = 'Firip Yamagusi'

# standard
from time import time_ns, strftime
from random import randint
from asyncio import run
from math import ceil

# third-party
import logging
from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup, ReplyKeyboardRemove,
    Message, File)
import soundfile as sf

# custom
# –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
from config import MAIN, TB, YANDEX, LIM
from final_db import (
    get_db_connection,
    create_db,
    is_limit,
    create_user,
    update_user,
    add_file2remove,
    insert_tts,
    insert_stt,
)
from final_stt import (
    ask_speech_recognition,
    ask_speech_kit_stt,
)
from final_tts import (
    ask_speech_kit_tts,
)
from final_gpt import (
    count_tokens,
    ask_freegpt_async,
    ask_freegpt,
)

if MAIN['test_mode']:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.INFO,
    )
else:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.WARNING,
        filename=MAIN['log_filename'],
        filemode="w",
    )

# *******************************************************************
# –ü–û–ù–ï–°–õ–ê–°–¨! –í –ê–ö–ê–ö–£!
logging.warning(f"MAIN: start")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ). –ë–µ–∑ –ë–î –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
db_conn = get_db_connection(MAIN['db_filename'])
if db_conn == False:
    exit(1)

logging.warning(f"MAIN: DB open connection")

r = create_db(db_conn)
if r == False:
    exit(2)

bot = TeleBot(TB['TOKEN'])
logging.warning(f"TB: start: {TB['BOT_NAME']} | {TB['TOKEN']}")

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS, STT (–≤–¥—Ä—É–≥ –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –ò–ò-—Ä–µ—Å—É—Ä—Å—ã)
t_stop_test = '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
mu_stop_test = ReplyKeyboardMarkup(
    row_width=1,
    resize_keyboard=True)
mu_stop_test.add(*[t_stop_test])

# –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –º—É—á–∏—Ç—å –ë–î
user_data = {}


def convert_ogg_to_wav(input_file: str, output_file: str) -> tuple:
    """
    –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ STT –Ω—É–∂–µ–Ω WAV
    https://pypi.org/project/soundfile/
    """
    try:
        data, samplerate = sf.read(input_file)
        sf.write(output_file, data, samplerate, format='WAV')
        return True, output_file
    except Exception as e:
        return False, e


def check_user(m):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (MAX_USERS)
    """
    global user_data, db_conn

    user_id = m.from_user.id

    if user_id not in user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ user_data, —Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id
        # –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Ä—É–Ω–¥–∞ –≤ –∏–º–µ–Ω–∏.
        user_data[user_id]['user_name'] = m.from_user.first_name
        user_data[user_id]['age'] = 20

        # –Ω–æ –≤ –ë–î –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if not create_user(db_conn, user_data[user_id]):
            bot.send_message(
                user_id,
                f"<b>–û–®–ò–ë–ö–ê!</b>\n"
                f"–ü–æ –¢–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
                f"–°–µ–π—á–∞—Å {LIM['P_USERS']['value']}/{LIM['P_USERS']['value']}. "
                f"–ù–µ –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å",
                parse_mode="HTML",
                reply_markup=hideKeyboard)
            logging.warning("MAIN: check_user Can't create user! {user_id}")
            return False


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '‚úåüèª <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.</b>\n\n'
        '–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–µ–ª –Ω–∞ –ª–µ—Ç–æ. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /profile, '
        '–∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –¥–µ–ª: /idea\n\n'
        '–ì–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª —Å–º–æ—Ç—Ä–∏ –≤ /show_plan\n\n'
        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['profile'])
def handle_profile(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∂–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ò–ò-—Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω–µ–µ
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '–°–æ–æ–±—â–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç. '
        '–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ '
        '<i>—É—á—É—Å—å –≤ 10 –∫–ª–∞—Å—Å–µ</i> –∏–ª–∏ <i>—è –Ω–∞ 2 –∫—É—Ä—Å–µ</i>.',
        parse_mode='HTML',
        reply_markup=hideKeyboard)
    bot.register_next_step_handler(m, process_profile)


def process_profile(m: Message):
    """
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç.
    –ì–æ–ª–æ—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ speech_recognition
    –î–∞–ª—å—à–µ —Ñ—Ä–∞–∑—É –¥–∞—ë–º GPT, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.voice:
        voice_err_msg = ("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—ë –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                         "–ü–æ–ø—Ä–æ–±—É–π —á—ë—Ç—á–µ –∏ –∫–æ—Ä–æ—á–µ 5 —Å–µ–∫. –ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–º. /profile")
        if m.voice.duration > 5:
            bot.send_message(user_id, voice_err_msg, reply_markup=hideKeyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º OGG
        file_info = bot.get_file(m.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        ogg_path = file_info.file_path
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–±–µ
        try:
            with open(ogg_path, 'wb') as ogg_file:
                ogg_file.write(downloaded_file)
                add_file2remove(db_conn, user_data[user_id], ogg_path)
                logging.debug(f"MAIN: process_profile: {user_id} {ogg_path}")
        except Exception as e:
            bot.send_message(user_id, voice_err_msg, reply_markup=hideKeyboard)
            logging.error(f"MAIN: process_profile: {user_id} ogg_write {e}")
            return

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ WAV –¥–ª—è speech_recognition
        try:
            wav_file = f"{ogg_path[0:-4]}.wav"
            a_data, a_samplerate = sf.read(ogg_path)
            sf.write(wav_file, a_data, a_samplerate)
            add_file2remove(db_conn, user_data[user_id], wav_file)
            logging.debug(f"MAIN: process_profile: {user_id} now is {wav_file}")
        except Exception as e:
            bot.send_message(user_id, voice_err_msg, reply_markup=hideKeyboard)
            logging.error(f"MAIN: process_profile: {user_id} ogg2wav {e}")
            return

        # –∞ –≤–æ—Ç –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π speech_recognition. –ë–ª–æ–∫–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º
        try:
            success, result = ask_speech_recognition(wav_file)
            bot.send_message(
                user_id,
                f"–Ø —É—Å–ª—ã—à–∞–ª: <i>{result}</i>",
                parse_mode='HTML',
                reply_markup=hideKeyboard)
        except Exception as e:
            bot.send_message(user_id, voice_err_msg, reply_markup=hideKeyboard)
            logging.error(f"MAIN: process_profile: {user_id} sr {e}")
            return

    if m.text:
        result = m.text

    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å–ª–æ–º, —Ç–æ –ø—Ä–æ—Å—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    user_age = 17  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if result.isdigit() and (10 <= int(result) <= 75):
        user_age = int(result)
    # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ GPT
    else:
        gpt_model = "gpt3"
        gpt_prompt = (f"–ö—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {result}. "
                      f"–°–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–ª–æ–≤")
        # —Å–ª—É—á–∞–π–Ω–æ sync or async
        if randint(0, 2):
            res = run(ask_freegpt_async(model=gpt_model, prompt=gpt_prompt))
        else:
            res = ask_freegpt(model=gpt_model, prompt=gpt_prompt)

        print(res)
        if res[0] and res[1].isdigit():
            user_age = int(res[1])
        if not (10 <= user_age <= 75):
            user_age = 71

    user_data[user_id]['user_age'] = user_age

    update_user(db_conn, user_data[user_id])
    bot.send_message(
        user_id,
        f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: <b>{user_age}</b>. "
        f"–ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É /profile",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['idea'])
def handle_idea(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /idea
    –ó–¥–µ—Å—å –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Å—É–∂–¥–∞–µ–º —Å –ò–ò –Ω–æ–≤—É—é –∏–¥–µ—é.
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    """
    user_id = m.from_user.id
    check_user(m)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '–°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ª–µ—Ç–æ!\n\n'
        '–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–Ø –ª—é–±–ª—é –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ!</i>, '
        '–∞ —è –ø—Ä–µ–¥–ª–æ–∂—É –∑–∞–¥–∞–Ω–∏–µ. '
        '–ï—Å–ª–∏ –æ–Ω–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –ø—Ä–∏—à–ª–∏ '
        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_tts'])
def handle_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ Text-to-speech</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ 50-150 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–∏ –≤ –æ—Ç–≤–µ—Ç –æ–∑–≤—É—á–∫—É.\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏ <i>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>)\n\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª—ã: /stat ",
        parse_mode='HTML',
        reply_markup=mu_stop_test)
    bot.register_next_step_handler(m, process_test_tts)


def process_test_tts(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∞—É–¥–∏–æ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.text == t_stop_test:
        bot.send_message(
            user_id,
            f"–û–∫, –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Text-to-speech.\n"
            f"–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ: /start",
            reply_markup=hideKeyboard)
        return

    if not m.text:
        bot.send_message(
            user_id,
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_tts",
            reply_markup=hideKeyboard)
        return

    symbols = len(m.text)

    r1, r2 = is_limit(db_conn,
                      param_name='P_TTS_SYMBOLS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + symbols) > LIM['P_TTS_SYMBOLS']['value']:
        bot.send_message(
            user_id,
            f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_TTS_SYMBOLS\n"
            f"{LIM['P_TTS_SYMBOLS']['descr']}\n"
            f"({r2} + {symbols}) >= {LIM['P_TTS_SYMBOLS']['value']}",
            reply_markup=hideKeyboard)
        return

    r1, r2 = is_limit(db_conn,
                      param_name='U_TTS_SYMBOLS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + symbols) > LIM['U_TTS_SYMBOLS']['value']:
        bot.send_message(
            user_id,
            f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_TTS_SYMBOLS\n"
            f"{LIM['U_TTS_SYMBOLS']['descr']}\n"
            f"({r2} + {symbols}) >= {LIM['U_TTS_SYMBOLS']['value']}",
            reply_markup=hideKeyboard)
        return

    bot.send_message(
        user_id,
        f"–ü–µ—Ä–µ–¥–∞—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"—Å–∏–º–≤–æ–ª–æ–≤: <b>{symbols}</b>\n"
        f"—Ç–µ–∫—Å—Ç: <i>{m.text}</i>\n",
        parse_mode='HTML',
        reply_markup=hideKeyboard)

    success, response = ask_speech_kit_tts(m.text)
    if success:
        insert_tts(db_conn, user_data[user_id], m.text, symbols)

        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
        # audio_name = f"voice/tts-{user_id}.ogg"
        # with open(audio_name, "wb") as f:
        #     f.write(response)
        # with open(audio_name, "rb") as f:
        #     bot.send_audio(user_id, f)
        #     f.close()
        # add_file2remove(db_conn, user_data[user_id], audio_name)
        try:
            bot.send_audio(user_id, response, title='–ü—Ä–æ–≤–µ—Ä–∫–∞ Text-to-Speech',
                           caption='–ó–∞–ø—É—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å –∑–≤—É–∫, –µ—Å–ª–∏ –Ω–µ '
                                   '—Å–ª—ã—à–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat')
            logging.debug(f"MAIN: process_test_tts: OK for {user_id}")
        except Exception as e:
            logging.warning(f"MAIN: process_test_tts: {e} for {user_id}")

    else:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.warning(f"MAIN: process_test_tts: not success: {response}")
        bot.send_message(
            user_id,
            f"–û—à–∏–±–∫–∞ Yandex SpeechKit: <b>{response}</b>",
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        return

    # bot.send_message(
    #     user_id,
    #     f'–ó–∞–ø—É—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å –∑–≤—É–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—ã—à–Ω–æ.\n'
    #     f'–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat',
    #     parse_mode="HTML",
    #     reply_markup=hideKeyboard)


@bot.message_handler(commands=['test_stt'])
def handle_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    bot.send_message(
        user_id,
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Speech-to-text</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 5-15 —Å–µ–∫, –ø–æ–ª—É—á–∏ –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç.\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏ <i>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>)\n\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –±–ª–æ–∫–∏ (1 –±–ª–æ–∫ = 15 —Å–µ–∫): /stat ",
        parse_mode='HTML',
        reply_markup=mu_stop_test)
    bot.register_next_step_handler(m, process_test_stt)


def voice_obj_to_text(m: Message, voice_obj: File, all_modules: int) -> tuple:
    """
    –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ –¥–ª—è /test_stt, /idea, /profile...
    –ù–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å voice –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤.
    –ù–∞—á–∏–Ω–∞–µ–º —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–∞, —Ç–æ –ø–ª–∞—Ç–Ω—ã–π.
    –ë–ª–æ–∫–∏ STT –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ.
    all_modules = 0 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–π—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
    """
    user_id = m.from_user.id

    # –¥–ª—è SpeechRecognition –Ω—É–∂–µ–Ω WAV
    ogg_file_path = voice_obj.file_path
    voice_file = bot.download_file(ogg_file_path)

    with open(ogg_file_path, 'wb') as ogg_file:
        ogg_file.write(voice_file)

    wav_file_path = f"{ogg_file_path[0:-3]}wav"
    wav_res = convert_ogg_to_wav(ogg_file_path, wav_file_path)[0]
    add_file2remove(db_conn, user_data[user_id], ogg_file_path)
    add_file2remove(db_conn, user_data[user_id], wav_file_path)

    stt_blocks = ceil(m.voice.duration / 15)
    logging.debug(f"MAIN: process_test_stt: {voice_obj.file_path} {stt_blocks}")

    result = {}
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechRecognition
    asr_start = time_ns()
    success, res = ask_speech_recognition(wav_file_path)
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if success:
        result['SpeechRecognition'] = {'content': res,
                                       'asr_time_ms': asr_time_ms}
        insert_stt(db_conn, user_data[user_id],
                   wav_file_path, content=res,
                   blocks=stt_blocks, model='SR',
                   asr_time_ms=asr_time_ms)
        if not all_modules:
            return True, result
    else:
        logging.info(f"–ú–æ–¥—É–ª—å SpeechRecognition: –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")

    # –ü–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechKit. –ü–µ—Ä–µ–¥ –Ω–∏–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    r1, r2 = is_limit(db_conn,
                      param_name='P_STT_BLOCKS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + stt_blocks) > LIM['P_STT_BLOCKS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç P_STT_BLOCKS\n"
                     f"{LIM['P_STT_BLOCKS']['descr']}\n"
                     f"({r2} + {stt_blocks}) >= {LIM['P_STT_BLOCKS']['value']}")
        return False, {'error': error_msg}

    r1, r2 = is_limit(db_conn,
                      param_name='U_STT_BLOCKS', user=user_data[user_id])
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if r1 or (r2 + stt_blocks) > LIM['U_STT_BLOCKS']['value']:
        error_msg = (f"–°–¢–û–ü! –ë—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç U_STT_BLOCKS\n"
                     f"{LIM['U_STT_BLOCKS']['descr']}\n"
                     f"({r2} + {stt_blocks}) >= {LIM['U_STT_BLOCKS']['value']}")
        return False, {'error': error_msg}

    asr_start = time_ns()
    success, res = ask_speech_kit_stt(voice_file)
    # success, res = True, "SpeechKit –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –∏–¥—ë—Ç —Ç–µ—Å—Ç –º–æ–¥—É–ª—è SR"
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if success:
        result['Yandex SpeechKit'] = {'content': res,
                                      'asr_time_ms': asr_time_ms}
        insert_stt(db_conn, user_data[user_id],
                   ogg_file_path, content=res,
                   blocks=stt_blocks, model='SpeechKit',
                   asr_time_ms=asr_time_ms)
        return True, result
    elif result.get('SpeechRecognition'):
        return True, result
    else:
        return False, {'error': res}

    return False, {'error': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}


def process_test_stt(m: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    if m.text == t_stop_test:
        bot.send_message(
            user_id,
            f"–û–∫, –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Speech-to-text.\n"
            f"–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ: /start",
            reply_markup=hideKeyboard)
        return

    if not m.voice:
        bot.send_message(
            user_id,
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_stt",
            reply_markup=hideKeyboard)
        return

    if m.voice.duration > 30:
        bot.send_message(
            user_id,
            f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /test_stt",
            reply_markup=hideKeyboard)
        return

    bot.send_message(
        user_id,
        f"–ü–µ—Ä–µ–¥–∞—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"–±–ª–æ–∫–æ–≤: <b>{ceil(m.voice.duration / 15)}</b>\n"
        f"–¥–ª–∏–Ω–∞: <b>{m.voice.duration} —Å–µ–∫</b>\n",
        parse_mode='HTML',
        reply_markup=hideKeyboard)

    # –î–ª—è SpeechKit –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    voice_obj = bot.get_file(m.voice.file_id)

    success, res = voice_obj_to_text(m, voice_obj, all_modules=True)
    if success:
        result_msg = ""
        for r in res.keys():
            result_msg += (
                f"–ú–æ–¥—É–ª—å <b>{r}</b> –∑–∞ {res[r]['asr_time_ms']} –º—Å:\n"
                f"<i>{res[r]['content']}</i>\n\n")
    else:
        result_msg = f"<b>–û—à–∏–±–∫–∞!</b>\n\n{res['error']}\n\n"
    bot.send_message(
        user_id,
        f"{result_msg}–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


def append_stat(stat: list, param_name: str, user: dict) -> list:
    """
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ /stat
    """
    r1, r2 = is_limit(db_conn, param_name=param_name, user=user)

    stat.append(f"{LIM[param_name]['descr']}:")
    stat.append(f"<b>{int(100 * r2 / LIM[param_name]['value'])}</b>% "
                f"({r2} / {LIM[param_name]['value']})")

    return stat


@bot.message_handler(commands=['stat'])
def handle_stat(m: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    global db_conn, user_data
    user_id = m.from_user.id
    check_user(m)

    p_stat = []
    p_stat = append_stat(p_stat, 'P_USERS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_GPT_TOKENS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_TTS_SYMBOLS', user_data[user_id])
    p_stat = append_stat(p_stat, 'P_STT_BLOCKS', user_data[user_id])

    u_stat = []
    u_stat = append_stat(u_stat, 'U_GPT_TOKENS', user_data[user_id])
    u_stat = append_stat(u_stat, 'U_TTS_SYMBOLS', user_data[user_id])
    u_stat = append_stat(u_stat, 'U_STT_BLOCKS', user_data[user_id])

    bot.send_message(
        user_id,
        f"<b>–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –†–ê–°–•–û–î –ò–ò-–†–ï–°–£–†–°–û–í</b>\n\n"
        f"<b>–í–µ—Å—å –ø—Ä–æ–µ–∫—Ç:</b>\n\n"
        f"{'\n'.join(p_stat)}\n\n"
        f"<b>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥:</b>\n\n"
        f"{'\n'.join(u_stat)}",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


# *********************************************************************
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.infinity_polling()
except urllib3.exceptions.ReadTimeoutError as e:
    logging.info(f"TB: Read timed out. (read timeout=25)")

logging.warning(f"TB: finish")

db_conn.close()
logging.warning(f"MAIN: DB close connection")

logging.warning(f"MAIN: finish")

#
#
# for limit in LIM.keys():
#     is_limit(db_conn,
#              param_name=limit,
#              user=user_data[666],
#              session_id=1)

# [print("MAIN", val) for val in MAIN]
# [print("TB", val) for val in TB]
# [print("YANDEX", val) for val in YANDEX]
# [print(val['descr'], val['value']) for val in LIM.values()]
